#!/bin/bash
BOLD=$(tput bold)
NORMAL=$(tput sgr0)
NC='\033[0m'
# Curtesy of https://stackoverflow.com/a/28938235/13449010
# Regular Colors
BLACK='\033[0;30m'        # Black
RED='\033[0;31m'          # Red
GREEN='\033[0;32m'        # Green
YELLOW='\033[0;33m'       # Yellow
BLUE='\033[0;34m'         # Blue
PURPLE='\033[0;35m'       # Purple
CYAN='\033[0;36m'         # Cyan
WHITE='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White
function initmine() {
    NAME=$1
    DIR=/opt/mine-$NAME
    cd $DIR
    fancy_message info "Making directories"
    mkdir {server,backups}
    cd server
    mine-jar $NAME
    fancy_message info "Accepting EULA"
    echo 'eula=true' > eula.txt
    fancy_message info "Creating basic startup script for 1GB of RAM"
    touch start.sh
    echo '#!/bin/sh
BINDIR=$(dirname "$(readlink -fn "$0")")
cd "$BINDIR"
java -jar -server -Xms1G -Xmx1G server.jar nogui' > start.sh
    chmod +x start.sh
    fancy_message info "You should look here for more optimized flags: ${GREEN}https://mcflags.emc.gs${NC}"
    fancy_message info "Installing systemd service"
    cd /etc/systemd/system
    sudo wget -q -O $NAME.service "https://raw.githubusercontent.com/Henryws/mine/master/systemd/$NAME.service"
    fancy_message warn "You will need to edit ${GREEN}/etc/systemd/system/$NAME.service${NC}. Add your user in the line that says User="
    fancy_message info "You should put in ${RED}$(whoami)${NC}"
    exit
}
function mine-jar() {
    JARNAME=$1
    # Wgets output of curling release.json and jq'ing the name and url
    wget -q -O server.jar $(curl -s https://raw.githubusercontent.com/Henryws/mine/master/release.json | jq -r ."$JARNAME".url)
    fancy_message info "Downloaded $NAME"
}
function fancy_message() {
    if [ -z "${1}" ] || [ -z "${2}" ]; then
      return
    fi
    local RED="\e[31m"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local RESET="\e[0m"
    local MESSAGE_TYPE=""
    local MESSAGE=""
    MESSAGE_TYPE="${1}"
    MESSAGE="${2}"
    case ${MESSAGE_TYPE} in
      info) echo -e "[${BRed}+${NC}] INFO: ${MESSAGE}";;
      warn) echo -e "[${BRed}*${NC}] WARNING: ${MESSAGE}";;
      error) echo -e "[${BRed}!${NC}] ERROR: ${MESSAGE}";;
      *) echo -e "[${BOLD}?${NORMAL}] UNKNOWN: ${MESSAGE}";;
    esac
}
# https://gist.github.com/davejamesmiller/1965569
ask() {
    local prompt default reply

    if [[ ${2:-} = 'Y' ]]; then
        prompt='Y/n'
        default='Y'
    elif [[ ${2:-} = 'N' ]]; then
        prompt='y/N'
        default='N'
    else
        prompt='y/n'
        default=''
    fi

    while true; do

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -n "$1 [$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read -r reply </dev/tty

        # Default?
        if [[ -z $reply ]]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}


while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo "options:
      -D      Will download and install the server of your choice. Run mine -S to find valid servers"
      exit 0
      ;;
    -D|--download)
      export LC_ALL=C
      # Download
      case $2 in
      vanilla)
        sudo mkdir /opt/mine-vanilla/
        sudo chown -R $USER:$USER /opt/mine-vanilla/
        cd /opt/mine-vanilla
        initmine vanilla
        exit
        ;;
      forge)
        sudo mkdir /opt/mine-forge/
        sudo chown -R $USER:$USER /opt/mine-forge
        cd /opt/mine-forge
        initmine forge
        java -jar /opt/mine-forge/server.jar --installServer
        exit
        ;;
      fabric)
        sudo mkdir /opt/mine-fabric/
        sudo chown -R $USER:$USER /opt/mine-fabric
        cd /opt/mine-fabric
        initmine fabric
        mv server.jar fabric-installer.jar
        java -jar /opt/mine-fabric/fabric-installer.jar server
        echo '#!/bin/sh
        cd $(dirname $0)
        java -jar -server -Xms1G -Xmx1G fabric-server-launch.jar nogui' > start.sh
        exit
        ;;
      paper)
        sudo mkdir /opt/mine-paper
        sudo chown -R $USER:$USER /opt/mine-paper
        cd /opt/mine-paper
        initmine paper
        exit
        ;;
      spigot)
        sudo mkdir /opt/mine-spigot
        sudo chown -R $USER:$USER /opt/mine-spigot
        cd /opt/mine-spigot
        initmine spigot
        mv server.jar buildtools.jar
        fancy_message info "Go get a cup of coffee; This is going to take a while depending on the oomph of your computer"
        java -jar buildtools.jar --rev latest
        mv spigot-*.jar server.jar
        fancy_message info "Removing BuildTools' directories"
        rm -rf {apache-maven-3.6.0,BuildData,Bukkit,CraftBukkit,Spigot,work}
        ;;
     *)
     esac
      ;;
    -B|--backup)
      SERVER=$2
      FILE=$(date +%s)
      [ -d /opt/mine-$SERVER ] || fancy_message error "$SERVER not valid" && exit 1
      DIR=/opt/mine-$SERVER
      fancy_message info "Stopping server"
      systemctl stop $SERVER
      cd $DIR
      zip -q -r server backups/$FILE.zip
      fancy_message info "Wrote to ${GREEN}backups/$FILE.zip${NC}"
      exit
      ;;    
    -RB|--recover-backup)
      SERVER=$2
      BACKUP=$3
      if ask "Do you want to continue? This will overwrite the contents of ${GREEN}/opt/mine-$SERVER/server${NC}" N; then
        cd /opt/mine-$SERVER/server/
        rm -rf /opt/mine-$SERVER/server/
        mv /opt/mine-$SERVER/backups/$BACKUP.zip /opt/mine-$SERVER/server/
        unzip /opt/mine-$SERVER/server/$BACKUP.zip /opt/mine-$SERVER/server/
        fancy_message info "Backed up server to $BACKUP"
        exit
      else
        exit 1
      fi
      ;;
    -R|--remove)
      SERVER=$2
      if ask "${RED}Do you want to remove $SERVER? This is a potentially dangerous command so be cautious${NC}" N; then
        fancy_message info "Stopping server"
        systemctl stop $SERVER
        # Finds last backup and puts in /tmp in case of accident
        LAST=$(find /opt/mine-$SERVER/backups -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" ")
        fancy_message info "Put last known backup in ${GREEN}/tmp${NC} in case your cat accidently mashed the keyboard. Your welcome."
        fancy_message info "Removing server"
        sudo rm -rf /opt/mine-$SERVER
        exit
      else
        exit
      fi
      ;;
    -L|--log)
      SERVER=$2
      less /opt/mine-$SERVER/server/logs/latest.log
      ;;
    -V|--version)
      echo "${GREEN}mine${NC}"
      exit
      ;;
    -U|--update)
      SERVER=$2
      mine-jar $SERVER
      exit 0
      ;;
    -S|--servers)
      fancy_message info "These are the valid server types you can download"
      curl -s https://raw.githubusercontent.com/Henryws/mine/master/release.json | jq keys
      ;;
    -Ls|--list-servers)
      cd /opt
      /bin/ls -d */ | grep 'mine'
      exit
      ;;
     *)
      mine -h
      exit 1
      ;;
  esac
done
