#!/bin/bash
BOLD=$(tput bold)
NORMAL=$(tput sgr0)
NC='\033[0m'
# Curtesy of https://stackoverflow.com/a/28938235/13449010
# Regular Colors
BLACK='\033[0;30m'        # Black
RED='\033[0;31m'          # Red
GREEN='\033[0;32m'        # Green
YELLOW='\033[0;33m'       # Yellow
BLUE='\033[0;34m'         # Blue
PURPLE='\033[0;35m'       # Purple
CYAN='\033[0;36m'         # Cyan

WHITE='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

progressfilt ()
{
    local flag=false c count cr=$'\r' nl=$'\n'
    while IFS='' read -d '' -rn 1 c
    do
        if $flag
        then
            printf '%s' "$c"
        else
            if [[ $c != $cr && $c != $nl ]]
            then
                count=0
            else
                ((count++))
                if ((count > 1))
                then
                    flag=true
                fi
            fi
        fi
    done
}

function initmine() {
    NAME=$1
    DIR=/opt/mine-$NAME
    cd $DIR
    fancy_message info "Making directories"
    mkdir {server,backups}
    cd server
    fancy_message info "Downloading $NAME"
    mine-jar $NAME
    fancy_message info "Accepting EULA"
    echo 'eula=true' > eula.txt
    fancy_message info "Creating basic startup script for 1GB of RAM"
    touch start.sh
    echo '#!/bin/sh
# This script is run by systemd so you can edit anything related to the server startup here without using root and messing up something with systemd
# makes the script runnable from anywhere on the system
BINDIR=$(dirname "$(readlink -fn "$0")")
cd "$BINDIR"
# INITIAL_MEM is how much memory you want java to start with. You can edit it with G (gigabytes) or m (megabytes)
INITIAL_MEM="1G"
# MAX_MEM is the same thing as above except it is the hard limit on how much memory java will run with. If INITIAL_MEM and MAX_MEM are the same it will help with garbage collecting.
MAX_MEM="1G"
# Put flags in between the quotes below
FLAGS=""
# nogui is at the end because without it will suck all your available ram. The -server flag is to tell java to conserve ram and cpu as much as possible
java -jar -server -Xms$INITIAL_MEM -Xmx$MAX_MEM $FLAGS server.jar nogui' > start.sh
    chmod +x start.sh
    fancy_message info "You should look here for more optimized flags: ${GREEN}https://mcflags.emc.gs${NC}"
    fancy_message info "Installing systemd service"
    whoami=$(whoami)
    sudo wget -q -O /etc/systemd/system/$NAME.service "https://raw.githubusercontent.com/Henryws/mine/master/systemd/$NAME.service"
    sudo sed -i "s/User=/User=$whoami/g" "/etc/systemd/system/$NAME.service"
    # fancy_message warn "You will need to edit ${GREEN}/etc/systemd/system/$NAME.service${NC}. Add your user in the line that says User="
    # fancy_message info "You should put in ${RED}$(whoami)${NC}"
}
function mine-jar() {
    JARNAME=$1
    # Wgets output of curling release.json and jq'ing the name and url
    # wget -q -O server.jar $(curl -s https://raw.githubusercontent.com/Henryws/mine/master/release.json | jq -r ."$JARNAME".url)
    wget --progress=bar:force -O server.jar $(curl -s https://raw.githubusercontent.com/Henryws/mine/master/release.json | jq -r ."$JARNAME".url) 2>&1 | progressfilt
    fancy_message info "Downloaded $NAME"
}

spinner()
{
    local pid=$1
    local delay=0.75
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

function fancy_message() {
    if [ -z "${1}" ] || [ -z "${2}" ]; then
      return
    fi
    local RED="\e[31m"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local RESET="\e[0m"
    local MESSAGE_TYPE=""
    local MESSAGE=""
    MESSAGE_TYPE="${1}"
    MESSAGE="${2}"
    case ${MESSAGE_TYPE} in
      info) echo -e "[${GREEN}+${NC}] INFO: ${MESSAGE}";;
      warn) echo -e "[${YELLOW}*${NC}] WARNING: ${MESSAGE}";;
      error) echo -e "[${RED}!${NC}] ERROR: ${MESSAGE}";;
      *) echo -e "[${BOLD}?${NORMAL}] UNKNOWN: ${MESSAGE}";;
    esac
}
# https://gist.github.com/davejamesmiller/1965569
ask() {
    local prompt default reply

    if [[ ${2:-} = 'Y' ]]; then
        prompt="${GREEN}Y${NC}/${RED}n${NC}"
        default='Y'
    elif [[ ${2:-} = 'N' ]]; then
        prompt="${GREEN}y${NC}/${RED}N${NC}"
        default='N'
    else
        prompt="${GREEN}y${NC}/${RED}n${NC}"
        default=''
    fi

    while true; do

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -ne "$1 [$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read -r reply </dev/tty

        # Default?
        if [[ -z $reply ]]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}


while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo 'options: Flag | Description | Example
      -D   |   Will download and install the server of your choice. Run mine -S to find valid servers | mine -D paper
      -B   |   Will stop and backup the specified server | mine -B vanilla
      -RB  |   Will recover the specified backup (You will lose everything since the last backup) | mine -RB vanilla 193827
      -R   |   Will destroy the specified server | mine -R forge
      -L   |   Will open the latest log from specified server | mine -L purpur
      -S   |   Will list valid servers to download | mine -S
      -Ls  |   Will list your current servers | mine -Ls
      -A   |   Will open the console to the specified server | mine -A spigot
      -X   |   Will start the specified server | mine -X paper
      -XX  |   Will stop the specifed server | mine -XX paper
      -E   |   Change a value of server.properties easily | mine -E fabric server-port 25567'
      exit 0
      ;;
    -D|--download)
      export LC_ALL=C
      # Download
      case $2 in
      vanilla)
        sudo mkdir /opt/mine-vanilla/ || exit 1
        sudo chown -R $USER:$USER /opt/mine-vanilla/
        cd /opt/mine-vanilla
        initmine vanilla
        exit
        ;;
      forge)
        sudo mkdir /opt/mine-forge/ || exit 1
        sudo chown -R $USER:$USER /opt/mine-forge/
        cd /opt/mine-forge/
        initmine forge
        cd server/
        fancy_message info "Running install. This may take a while"
        java -jar server.jar --installServer 2>&1
        rm server.jar
        for f in *.jar; do mv -i "$f" server.jar; done
        exit
        ;;
      fabric)
        sudo mkdir /opt/mine-fabric/ || exit 1
        sudo chown -R $USER:$USER /opt/mine-fabric
        cd /opt/mine-fabric/
        initmine fabric
        mv server.jar fabric-installer.jar
        java -jar /opt/mine-fabric/fabric-installer.jar server
        echo '#!/bin/sh
        cd $(dirname $0)
        java -jar -server -Xms1G -Xmx1G fabric-server-launch.jar nogui' > start.sh
        exit
        ;;
      paper)
        sudo mkdir /opt/mine-paper/ || exit 1
        sudo chown -R $USER:$USER /opt/mine-paper/
        cd /opt/mine-paper/
        initmine paper
        exit
        ;;
      spigot)
        sudo mkdir /opt/mine-spigot/
        sudo chown -R $USER:$USER /opt/mine-spigot/
        cd /opt/mine-spigot/
        initmine spigot
        mv server.jar buildtools.jar
        fancy_message info "Go get a cup of coffee; This is going to take a while depending on the oomph of your computer"
        java -jar buildtools.jar --rev latest
        mv spigot-*.jar server.jar
        fancy_message info "Removing BuildTools' directories"
        rm -rf {apache-maven-3.6.0,BuildData,Bukkit,CraftBukkit,Spigot,work}
        exit
        ;;
      purpur)
        sudo mkdir /opt/mine-purpur/
        sudo chown -R $USER:$USER /opt/mine-purpur/
        cd /opt/mine/spigot/
        initmine purpur
        exit
        ;;
     *)
     fancy_message error "run mine -S to see available servers"
     exit 1
     esac
      ;;
    -B|--backup)
      SERVER=$2
      FILE=$(date +%s)
      [ -d /opt/mine-$SERVER ] || fancy_message error "$SERVER not valid"
      DIR=/opt/mine-$SERVER
      fancy_message info "Stopping server"
      sudo systemctl stop $SERVER
      cd $DIR
      zip -q -r backups/$FILE.zip server/
      fancy_message info "Wrote to ${GREEN}backups/$FILE.zip${NC}"
      fancy_message info "If you want to rollback this server you would run ${RED}mine -RB $SERVER $FILE${NC}"
      if ask "Do you want to start the server again?" N; then
          mine -X $SERVER
      fi
      exit
      ;;    
    -RB|--recover-backup)
      SERVER=$2
      BACKUP=$3
      if ask "Do you want to continue? This will overwrite the contents of ${GREEN}/opt/mine-$SERVER/server${NC}" N; then
        fancy_message info "Stopping server"
        sudo systemctl stop $SERVER
        cd /opt/mine-$SERVER/server/
        rm -rf /opt/mine-$SERVER/server/*
        mv /opt/mine-$SERVER/backups/$BACKUP.zip /opt/mine-$SERVER/server/
        unzip /opt/mine-$SERVER/server/$BACKUP.zip /opt/mine-$SERVER/server/
        fancy_message info "Rolled-back the server to $BACKUP"
        exit
      else
        exit 1
      fi
      ;;
    -R|--remove)
      SERVER=$2
      if [ -d "/opt/mine-$SERVER" ]; then
      if ask "Do you want to remove $SERVER? This is a potentially dangerous command so be cautious" N; then
        fancy_message info "Stopping server"
        sudo systemctl stop $SERVER
        # Finds last backup and puts in /tmp in case of accident
        LAST=$(find /opt/mine-$SERVER/backups -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" ")
        mv /opt/mine-$SERVER/backups/$LAST /tmp
        fancy_message info "Put last known backup in ${GREEN}/tmp${NC} in case your cat accidently mashed the keyboard. Your welcome."
        fancy_message info "Removing server"
        sudo rm -rf /opt/mine-$SERVER
        fancy_message info "Removing systemd service"
        sudo rm /etc/systemd/system/"$SERVER".service
        exit
      else
        exit
      fi
      else
      fancy_message error "$SERVER doesn't exist"
      exit 1
      fi
      ;;
    -L|--log)
      SERVER=$2
      if [[ -n "$SERVER" ]]; then
      less /opt/mine-$SERVER/server/logs/latest.log
      exit
      else
      fancy_message error "You didn't specify a server"
      exit 1
      fi
      ;;
    -X|--start)
      SERVER=$2
      sudo systemctl start $SERVER
      exit
      ;;
    -XX|--stop)
      SERVER=$2
      sudo systemctl stop $SERVER
      exit
      ;;
    -U|--update)
      SERVER=$2
      mine-jar $SERVER
      exit 0
      ;;
    -S|--servers)
      # Like mine-jar but just jq's. The -C keeps colors and removes jq letters
      fancy_message info "Fetching server types"
      curl -s https://raw.githubusercontent.com/Henryws/mine/master/release.json | jq -C 'with_entries(.value |= .description)' | tr -d '"}{,'
      exit
      ;;
    -Ls|--list-servers)
      cd /opt/
      servers=$(/bin/ls -d */ | grep 'mine-')
      echo "${servers//mine-}" | tr -d '/'
      exit
      ;;
    -A|--attach)
      SERVER=$2
      screen -r $SERVER
      exit
      ;;
    -E|--edit)
      SERVER=$2
      KEY="$3"
      VALUE="$4"
      sed -i "s/$KEY=.*/$KEY=$VALUE/g" /opt/mine-$SERVER/server/server.properties
      exit
      ;;
     *)
      mine -h
      exit 1
      ;;
  esac
done
